output,input,instruction
"This utility aims to simplify the process of adding a power grid into a floorplan. The aim is to specify a small set of power grid policies to be applied to the design, such as layers to use, stripe width and spacing, then have the utility generate the actual metal straps. Grid policies can be defined over the stdcell area, and over areas occupied by macros.",,What is PDNGEN
"The -switch_cell argument is used to specify the name of a coarse-grain power switch cell that is to be inserted whereever the stdcell rail connects to the rest of the power grid. The mesh layers are associated with the unswitched power net of the voltage domain, whereas the stdcell rail is associated with the switched power net of the voltage domain. The placement of a power switch cell connects the unswitched power mesh to the switched power rail through a power switch defined by the define_power_switch_cell command.",,-switch_cell argument in Pdn while doing Power switch insertion
"State of the art multiple-constraints driven partitioning “multi-tool”. Optimizes cost function based on user requirement. Permissive open-source license
Solves multi-way partitioning with following features: Multidimensional real-value weights on vertices and hyperedges, Multilevel coarsening and refinement framework, Fixed vertices constraint, Timing-driven partitioning framework, Group constraint: Groups of vertices need to be in same block, Embedding-aware partitioning",,Features of par
"The Detailed Routing (drt) module in OpenROAD is based on the open-source detailed router, TritonRoute. TritonRoute consists of several main building blocks, including pin access analysis, track assignment, initial detailed routing, search and repair, and a DRC engine. The initial development of the router is inspired by the ISPD-2018 initial detailed routing contest. However, the current framework differs and is built from scratch, aiming for an industrial-oriented scalable and flexible flow.",,Is TritonRoute the foundation of drt?
The structure of OpenDB is based on the text file formats LEF (library) and DEF (design) formats version 5.6. OpenDB supports a binary file format to save and load the design much faster than using LEF and DEF. OpenDB is written in C++ 98 with standard library style iterators. The classes are designed to be fast enough to base an application on without having to copy them into application-specific structures.,,What is the structure of OpenDB?
"FastRoute integrates several novel techniques: fast congestion-driven via- aware Steiner tree construction, 3-bend routing, virtual capacity adjustment, multi-source multi-sink maze routing and spiral layer assignment. These techniques not only address the routing congestion measured at the edges of global routing grids but also minimize the total wirelength and via usage, which is critical for subsequent detailed routing, yield and manufacturability. Experimental results show that FastRoute is highly effiective and efficient to solve ISPD07 and ISPD08 global routing benchmark suites. The results outperform recently published academic global routers in both routability and runtime. In particular, for ISPD07 and ISPD08 global routing benchmarks, FastRoute generates 12 congestion free solutions out of 16 benchmarks with a speed singifinicantly faster than other routers.",,"How is FastRoute better than previous routing frameworks?
"
"RTL­MP, a novel macro placer which utilizes RTL information and tries to “mimic” the interaction between the frontend RTL designer and the back­ end physical design engineer to produce human­quality floorplans. By exploiting the logical hierarchy and processing logical modules based on connection signatures, RTL­MP can capture the dataflow inherent in the RTL and use the dataflow information to guide macro placement.",,What does RTLMP do?
"Recently, with the increasing complexity of IP blocks, and in particular with auto-generated RTL for machine learning (ML) accelerators, the number of macros in a single RTL block can easily run into the several hundreds. This makes the task of generating an automatic floorplan (.def) with IO pin and macro placements for front-end physical synthesis even more critical and challenging. The so- called peripheral approach of forcing macros to the periphery of the layout is no longer viable when the ratio of the sum of the macro perimeters to the floorplan perimeter is large, since this increases the required stacking depth of macros. Thus, a novel multilevel physical planning approach that exploits the hierarchy and dataflow inherent in the design RTL, and describe its realization in a new hierarchical macro placer, Hier-RTLMP was developed. ",,What was the need to develop  Hier-RTLMP?
"Hier- RTLMP consists of autoclustering engine that transforms the logical hierarchy to a physical hierarchy. Unlike RTL- MP [51] where the physical hierarchy is a single level, Hier- RTLMP’s autoclustering engine creates a multilevel physical hierarchy of physical clusters. This enables handling of large RTLs with hundreds of macros, and allows for placement of macros within the core area.
",,What does Hier- RTLMP do which RTL-MP lacks?
"The first part of FastRoute framework is topology generation. Because FastRoute tries to avoid rip-up and reroute to reduce both wirelength and runtime, the initial tree topology has significant impacts. With the congestion-driven and via-aware topology, the next stage of FastRoute is actual routing. We find that there exists significant potential to improve traditional routing techniques in terms of via control and congestion reduction. The most commonly used routing techniques in global routing include L/Z/U pattern routing, monotonic routing and maze routing. In addition to new topology and routing techniques, Fast Route integrates several performance enhancement techniques to further improve routing quality and reduce run time. The last is, Spiral Layer Assignment





",,What are fast route techniques?
"Traditionally, global routing just uses tree structure like RMST or RSMT while RSMT is becoming more popular due to its minimal wirelength to connect a multi-pin net together.
",,Why is RSMT used more?
"There are generally two ways to generate solutions in Spiral Layer Assignment for 3D global routing benchmarks. One is running routing techniques and layer assignment concurrently. It overly complicates the problem and is rarely used. The other more popular way first projects the 3D benchmarks from aerial view, finds a solution for the 2D problem and expands the solution to multiple layers.
",,Which way is preferable for Spiral Layer Assignment?
Convert to debug message. Possibly add something that is more helpful as a progress message.,,"These following output doesn't really tell me anything about how far along the process is, what is going on and I can't use the information for anything, aren't actionable: Calling Partitioner,
[INFO PAR-0016] Partitioning using multilevel methodology."
The GUI is custom qt code and not applicable to the console. We rely on tclreadline there which apparently doesn't work well with imported namespaced.,,Tab completion does work in console mode but not in GUI mode.
"Suspending openroad and inspecting the stack trace, I find that it is spending its time here. It spends hours here.",,"I am creating a mock abstract of an SRAM to study the top level of the design. This is an SRAM that belongs to L2 in MegaBoom. So turnaround times are important here, not quality of results but turnaround time is alot, how to reduce that?"
These specific messages just inform the user of each stage of HierRTLMP flow,"[INFO MPL-0024] [Multilevel Autoclustering] Creating clustered netlist.
[INFO MPL-0039] [Coarse Shaping] Determining shape functions for clusters.
[INFO MPL-0028] [Hierarchical Macro Placement] Placing clusters and macros.
[INFO MPL-0037] Updated location of 95 macros
Delete buffers for RTLMP flow...
[INFO RSZ-0026] Removed 0 buffers.",What do these Debug output mean?
"Those arguments add a pad which is measured in cell sites to effectively make the cell appear wider. pad_left adds a pad to the left side, pad_right adds it to the right side",,"There is also nothing about -pad_right and -pad_left argument of the global_placement function, or the units of those arguments"
This is the intended behavior. Padding only impacts the way GPL (and DPL) sees the cells. If you were to use report_design_area then you would see the unpadded design utilization. There could be an enhancement to GPL to report both the padded and unpadded area I suppose.,,"The issue comes from the padding in GPL. Whenever I set it to 0 (set global_place_pad 2 & set detail_place_pad 1 in asap7_bottom.vars) then the proper DU is reported, I don't know if this is the intended behavior, but I feel like space padding present existing to facilitate routing should not influence the DU... "
"Yes, that's exactly the point. If you don't want padding in your design, then you should reduce it or turn it off. But be forewarned that padding is usually necessary to achieve a cleanly routed design. If you want to optimize for very high density designs, I believe you can also set padding on a master-by-master basis so that only the most difficult cells are padded. That would take some trial and error.",,"But wouldn't that reduce the maximum design utilization possible for a design ? Especially since OpenROAD wants to be automatic, GPL will stop everything if it sees a DU >100% even if it could be possible to achieve a reasonable DU with an equivalent padding ?"
"If you are using ORFS, the CORE_UTILIZATION (which is what I assume you are referring to) is actually not that well defined and usually isn't an indicator of the utilization you end up with.
After Yosys (synthesis) runs, you have a gate-level netlist. During floorplanning, the design area from this unmodified netlist is used to calculate how big the die and core sizes should be (design area / CORE_UTILIZATION = CORE_AREA). After it does that, the die and core areas are fixed.
The utilization will immediately go down because ORFS removes all buffers inserted by Yosys. The utilization will then go up again, usually by a lot, because OpenROAD does rebuffering and gate resizing in order to meet timing constraints. Timing constraints are critical and the algorithm does not factor in utilization targets at all. You could easily start with a design at 70% utilization during the initialization step, and then go up to 90% because of optimization. Once you add padding during GPL, utilization can exceed 100%.
Why aren't the tools smarter? Why doesn't it account for this area increase due to timing optimization? Well because you have to do the entire timing optimization to figure out how much area it will take up. Trying to estimate this is an active area of research.
Everything is a trial and error process. If for some reason you specifically need a 70% utilization, then I would suggest you extremely relax your timing constraints so that the optimizer doesn't need to add much. Otherwise, you should simply start with a lower utilization, allow timing optimization to do its thing, and then finish with approximately whatever target utilization you're after.",,I encountered an issue with CORE_UTILIZATION when trying to aim for a DU of 70% on the ASAP7 PDK which should be possible and reasonable for any design
Yes. Relaxed timing constraints usually translates to less buffer insertion and smaller design area.,,"if I have a design for which the detailed placement fails for a few instances, if I relax my timing constraints it may result in a successful placement ?"
"Yes. We have found that OpenROAD optimizes better when the buffers from Yosys are removed, because Yosys does not do physical synthesis.",,"the timing optimizations done by the synthesis tool are ""discarded"" as the buffers are removed"
"You may get a different result with different timing constraints as gates may be sized, not only buffers. To add, historically we have not seen much change in the output of Yosys based on the timing constraints provided, but the results aren't necessarily identical.",,Is there no need to re-synthesize with different timing constraint with Yosys ? Or does it also use different/bigger non-buffer cells that also need to be resized ?
I suppose this is because you have multiple block abstracts with the same via. ,"[WARNING ODB-0208] VIA: duplicate VIA (via5_6_120_288_1_2_58_322) ignored...
[deleted]",What do these output mean?
The LEF abstract writer needs to include the generated vias.," Reading LEF file: bazel-bin/build/results/asap7/data_2048x2/base/data_2048x2.lef
[WARNING ODB-0177] error: undefined via (via5_6_120_288_1_2_58_322) referenced
[WARNING ODB-0177] error: undefined via (via5_6_120_288_1_2_58_322) referenced",What do these output mean?
I'd advise against using low level odb APIs. The db you are creating has no logger and can't issue any messages.,,"Upon attempting to read an invalid ODB file, OpenROAD doesn't attempt to validate it, and instead crashes with a cryptic message of Error: read_db.tcl, 1 ios_base::clear: unspecified iostream_category error"
"The IR Drop Analysis module in OpenROAD (psm) is based on PDNSim, an open-source static IR analyzer.",,What is IR Drop Analysis
"Features: Report worst IR drop, Report worst current density over all nodes and wire segments in the power distribution network, given a placed and PDN-synthesized design, Check for floating PDN stripes on the power and ground nets, Spice netlist writer for power distribution network wire segments",,Features of IR Drop analysis 
Flute3 is an open-source rectilinear Steiner minimum tree heuristic with improvements made by UFRGS students and James Cherry. This tool is used for the calculation of wirelength in grt and rsz.,,What is Flute3?
"OpenDB is a design database to support tools for physical chip design. It was originally developed by Athena Design Systems. Nefelus, Inc. acquired the rights to the code and open-sourced it with BSD-3 license in 2019 to support the DARPA OpenROAD project. The structure of OpenDB is based on the text file formats LEF (library) and DEF (design) formats version 5.6. OpenDB supports a binary file format to save and load the design much faster than using LEF and DEF. OpenDB is written in C++ 98 with standard library style iterators. The classes are designed to be fast enough to base an application on without having to copy them into application-specific structures.",,What is OpenDB?
It is a tool used to generate code for OpenDB objects and Iterators,,What is Automatic Code Generator used for?
"OpenROAD is run using Tcl scripts. The following commands are used to read and write design data.
read_lef [-tech] [-library] filename
read_def filename
write_def [-version 5.8|5.7|5.6|5.5|5.4|5.3] filename
read_verilog filename
write_verilog filename
read_db filename
write_db filename
write_abstract_lef filename",,What commands are used to read and write design data in OpenROAD?
OpenROAD is run using Tcl scripts. ,,How is OpenROAD run?
OpenROAD contains an abstract LEF writer that can take your current design and emit an abstract LEF representing the external pins of your design and metal obstructions. Use the following command for this: write_abstract_lef (-bloat_factor bloat_factor|-bloat_occupied_layers) filename,,"What support does OpenROAD have for Abstract LEF?
"
The global_connect command is used to connect power and ground pins on design instances to the appropriate supplies.,,What does the global_connect command do ?
The clear_global_connect command is used remove all defined global connection rules.,,What does the clear_global_connect command do?
"The report_global_connect command is used print out the currently defined global connection rules.
",,What does the report_global_connect command do?
"The report_cell_usage command is used to print out the usage of cells for each type of cell.
",,What does the report_cell_usage command do?
OpenROAD takes the area of the instances coming from synthesis and convert that to a core area based on the utilization. It then shapes that core area based on the aspect_ratio. Finally OpenROAD expands it by the spacing on each edge to get the die area.,,How does OpenROAD compute the die area when using the core_utilization argument in the initialize_floorplan?
The output is a stdout so you can use standard unix file operations to capture it. ,,I would like to know if there is any way to write the log output from OpenROAD into a file (using a report_ type command). 
"In theory OpenROAD could route in two layers but it has rarely been tried by the developers due to the lack of a specialized channel router. Rxpectation are that OpenROAD will hit some issues and have to iterate. Kindly file an issue on GitHub if you face any. Additionally, if the PDK is closed, it will be harder to do so but I'm sure that Fastroute and TritonRoute are capable of routing on two layers.",,What is the minimum number of metal layers OpenROAD can route in?
OpenROAD (OR) works well with  VT cells  and can swap between VT cells. ,,"Can OpenROAD work with multi VT cells ( HVT , LVT , SVT ) and swap between them in a single run ? "
"OpenROAD supports multi-corner but not multi-mode STA. Also if you are asking about MMMC files from commercial vendors, those are proprietary formats which OpenROAD doesn't support. OpenROAD support multi-corner analysis as mentioned. You can look in the OpenSTA manual to find the relevant commands.",,Can OpenROAD work with MultiModeMulti Corner File (mmmc) ?
Yes. The is the surelog plugin that has a good amount of SV support,,Is SystemVerilog support limited to the constructs that Yosys supports?
"Place pins on the boundary of the die on the track grid to minimize net wirelengths. Pin placement also creates a metal shape for each pin using min-area rules. For designs with unplaced cells, the net wirelength is computed considering the center of the die area as the unplaced cells' position.",,What is the job of Pin Placer?
"This tool checks antenna violations and generates a report to indicate violated nets. See LEF/DEF 5.8 Language Reference, Appendix C, ""Calculating and Fixing Process Antenna Violations"" (p.389) for a description of antenna violations.",,What does Antenna Rule Checker do?
"The clock tree synthesis module in OpenROAD (cts) is based on TritonCTS 2.0. It is available from the clock_tree_synthesis command. TritonCTS 2.0 performs on-the-fly characterization. Thus, there is no need to generate characterization data. The on-the-fly characterization feature can be optionally controlled by parameters specified by the configure_cts_characterization command. Use set_wire_rc command to set the clock routing layer.
Commands

- Parameters in square brackets `[-param param]` are optional.
- Parameters without square brackets `-param2 param2` are required.

Configure CTS Characterization

configure_cts_characterization 
    [-max_slew max_slew]
    [-max_cap max_cap]
    [-slew_steps slew_steps]
    [-cap_steps cap_steps]

Options

Switch Name
Description
-max_slew
Max slew value (in the current time unit) that the characterization will test. If this parameter is omitted, the code would use max slew value for specified buffer in buf_list from liberty file.
-max_cap
Max capacitance value (in the current capacitance unit) that the characterization will test. If this parameter is omitted, the code would use max cap value for specified buffer in buf_list from liberty file.
-slew_steps
Number of steps that max_slew will be divided into for characterization. The default value is 12, and the allowed values are integers [0, MAX_INT].
-cap_steps
Number of steps that max_cap will be divided into for characterization. The default value is 34, and the allowed values are integers [0, MAX_INT].
Clock Tree Synthesis

clock_tree_synthesis 
    -buf_list <list_of_buffers>
    [-root_buf root_buf]
    [-wire_unit wire_unit]
    [-clk_nets <list_of_clk_nets>]
    [-distance_between_buffers]
    [-branching_point_buffers_distance]
    [-clustering_exponent]
    [-clustering_unbalance_ratio]
    [-sink_clustering_enable]
    [-sink_clustering_size cluster_size]
    [-sink_clustering_max_diameter max_diameter]
    [-balance_levels]
    [-num_static_layers]
    [-sink_clustering_buffer]
    [-use_dummy_load]
    [-insertion_delay]
    [-sink_buffer_max_cap_derate derate_value]
    [-delay_buffer_derate derate_value]

Options

Switch Name
Description
-buf_list
Tcl list of master cells (buffers) that will be considered when making the wire segments (e.g. {BUFXX, BUFYY}).
-root_buffer
The master cell of the buffer that serves as root for the clock tree. If this parameter is omitted, the first master cell from -buf_list is taken.
-wire_unit
Minimum unit distance between buffers for a specific wire. If this parameter is omitted, the code gets the value from ten times the height of -root_buffer.
-clk_nets
String containing the names of the clock roots. If this parameter is omitted, cts automatically looks for the clock roots automatically.
-distance_between_buffers
Distance (in microns) between buffers that cts should use when creating the tree. When using this parameter, the clock tree algorithm is simplified and only uses a fraction of the segments from the LUT.
-branching_point_buffers_distance
Distance (in microns) that a branch has to have in order for a buffer to be inserted on a branch end-point. This requires the -distance_between_buffers value to be set.
-clustering_exponent
Value that determines the power used on the difference between sink and means on the CKMeans clustering algorithm. The default value is 4, and the allowed values are integers [0, MAX_INT].
-clustering_unbalance_ratio
Value determines each cluster's maximum capacity during CKMeans. A value of 0.5 (i.e., 50%) means that each cluster will have exactly half of all sinks for a specific region (half for each branch). The default value is 0.6, and the allowed values are floats [0, 1.0].
-sink_clustering_enable
Enables pre-clustering of sinks to create one level of sub-tree before building H-tree. Each cluster is driven by buffer which becomes end point of H-tree structure.
-sink_clustering_size
Specifies the maximum number of sinks per cluster. The default value is 20, and the allowed values are integers [0, MAX_INT].
-sink_clustering_max_diameter
Specifies maximum diameter (in microns) of sink cluster. The default value is 50, and the allowed values are integers [0, MAX_INT].
-balance_levels
Attempt to keep a similar number of levels in the clock tree across non-register cells (e.g., clock-gate or inverter). The default value is False, and the allowed values are bool.
-clk_nets
String containing the names of the clock roots. If this parameter is omitted, cts looks for the clock roots automatically.
-num_static_layers
Set the number of static layers. The default value is 0, and the allowed values are integers [0, MAX_INT].
-sink_clustering_buffer
Set the sink clustering buffer(s) to be used.
-obstruction_aware
Enables obstruction-aware buffering such that clock buffers are not placed on top of blockages or hard macros. This option may reduce legalizer displacement, leading to better latency, skew or timing QoR. The default value is False, and the allowed values are bool.
-apply_ndr
Applies 2X spacing non-default rule to all clock nets except leaf-level nets. The default value is False.
-insertion_delay
Considers insertion delays in macro timing models in balancing latencies between macro cells and registers. This option causes construction of separate clock trees for macro cells and registers. The default value is False.
-use_dummy_load
Applies dummy buffer or inverter cells at clock tree leaves to balance loads. The default values is False.
-sink_buffer_max_cap_derate
Use this option to control automatic buffer selection. To favor strong(weak) drive strength buffers use a small(large) value. The default value is 0.01, meaning that buffers are selected by derating max cap limit by 0.01. The value of 1.0 means no derating of max cap limit.
-delay_buffer_derate
This option is used with -insertion_delay option that balances latencies between macro cells and registers by inserting delay buffers. The default values is 1.0, meaning all needed delay buffers are inserted. Value of 0.5 means only half of necessary delay buffers are inserted. Value of 0.0 means no insertion of delay buffers.
Report CTS

Another command available from cts is report_cts. It is used to extract metrics after a successful clock_tree_synthesis run. These are:
Number of Clock Roots
Number of Buffers Inserted
Number of Clock Subnets
Number of Sinks.
report_cts 
    [-out_file file]

Options

Switch Name
Description
-out_file
The file to save cts reports. If this parameter is omitted, the report is streamed to stdout and not saved.
Useful Developer Commands

If you are a developer, you might find these useful. More details can be found in the source file or the swig file.
Command Name
Description
clock_tree_synthesis_debug
Option to plot the CTS to GUI.
Example scripts

clock_tree_synthesis -root_buf ""BUF_X4"" \
                     -buf_list ""BUF_X4"" \
                     -wire_unit 20
report_cts ""file.txt""

Regression tests

There are a set of regression tests in ./test. For more information, refer to this section.
Simply run the following script:
./test/regression

Limitations

FAQs

Check out GitHub discussion about this tool.
References

LEMON - Library for Efficient Modeling and Optimization in Networks
Kahng, A. B., Li, J., & Wang, L. (2016, November). Improved flop tray-based design implementation for power reduction. In 2016 IEEE/ACM International Conference on Computer-Aided Design (ICCAD) (pp. 1-8). IEEE. (.pdf)
Authors

TritonCTS 2.0 is written by Mateus Fogaça, PhD student in the Graduate Program on Microelectronics from the Federal University of Rio Grande do Sul (UFRGS), Brazil. Mr. Fogaça's advisor is Prof. Ricardo Reis.
Many guidance provided by (alphabetic order):
Andrew B. Kahng
Jiajia Li
Kwangsoo Han
Tom Spyrou
License

BSD 3-Clause License. See LICENSE file.",,What is Clock Tree Synthesis in OpenROAD?
"The detailed placement module in OpenROAD (dpl) is based on OpenDP, or Open-Source Detailed Placement Engine. Its key features are:
Fence region.
Fragmented ROWs.
Commands

Detailed Placement

The detailed_placement command performs detailed placement of instances to legal locations after global placement.
detailed_placement
    [-max_displacement disp|{disp_x disp_y}]
    [-disallow_one_site_gaps]
    [-report_file_name filename]

Options

Switch Name
Description
-max_displacement
Max distance that an instance can be moved (in microns) when finding a site where it can be placed. Either set one value for both directions or set {disp_x disp_y} for individual directions. The default values are {0, 0}, and the allowed values within are integers [0, MAX_INT].
-disallow_one_site_gaps
Disable one site gap during placement check.
-report_file_name
File name for saving the report to (e.g. report.json.
Set Placement Padding

The set_placement_padding command sets left and right padding in multiples of the row site width. Use the set_placement_padding command before legalizing placement to leave room for routing. Use the -global flag for padding that applies to all instances. Use -instances for instance-specific padding. The instances insts can be a list of instance names, or an instance object returned by the SDC get_cells command. To specify padding for all instances of a common master, use the -filter ""ref_name == "" option to get_cells.
set_placement_padding   
    -global|-masters masters|-instances insts
    [-right site_count]
    [-left site_count]

Options

Either one of these flags must be set: `-global | -masters | -instances`.
The order of preference is `global > masters > instances`

Switch Name
Description
-global
Set padding globally using left and right values.
-masters
Set padding only for these masters using left and right values.
-instances
For -instances, you will set padding only for these insts using left and right values.
-left
Left padding (in site count).
-right
Right padding (in site count).
instances
Set padding for these list of instances. Not to be confused with the -instances switch above.
Filler Placement

The filler_placement command fills gaps between detail-placed instances to connect the power and ground rails in the rows. filler_masters is a list of master/macro names to use for filling the gaps. Wildcard matching is supported, so FILL* will match, e.g., FILLCELL_X1 FILLCELL_X16 FILLCELL_X2 FILLCELL_X32 FILLCELL_X4 FILLCELL_X8. To specify a different naming prefix from FILLER_ use -prefix <new prefix>.
filler_placement
    [-prefix prefix]
    filler_masters

Options

Switch Name
Description
-prefix
Prefix to name the filler cells. The default value is FILLER_.
filler_masters
Filler master cells.
Remove Fillers

This command removes all filler cells.
remove_fillers 

No arguments are needed for this function.
Check Placement

The check_placement command checks the placement legality. It returns 0 if the placement is legal.
check_placement
    [-verbose]
    [-disallow_one_site_gaps]
    [-report_filename filename]

Options

Switch Name
Description
-verbose
Enable verbose logging.
-disallow_one_site_gaps
Disable one site gap during placement check.
-report_file_name
File name for saving the report to (e.g. report.json.
Optimize Mirroring

The optimize_mirroring command mirrors instances about the Y axis in a weak attempt to reduce the total half-perimeter wirelength (HPWL).
optimize_mirroring

No arguments are needed for this function.
Useful Developer Commands

If you are a developer, you might find these useful. More details can be found in the source file or the swig file.
Command Name
Description
detailed_placement_debug
Debug detailed placement.
get_masters_arg
Get masters from a design.
get_inst_bbox
Get bounding box of an instance.
get_inst_grid_bbox
Get grid bounding box of an instance.
format_grid
Format grid (takes in length x and site width w as inputs).
get_row_site
Get row site name.
Example scripts

Examples scripts demonstrating how to run dpl on a sample design of aes as follows:
./test/aes.tcl

Regression tests

There are a set of regression tests in ./test. Refer to this section for more information.
Simply run the following script:
./test/regression

Limitations

FAQs

Check out GitHub discussion about this tool.
Authors

SangGi Do and Mingyu Woo (respective Ph. D. advisors: Seokhyeong Kang, Andrew B. Kahng).
Rewrite and port to OpenDB/OpenROAD by James Cherry, Parallax Software
References

Do, S., Woo, M., & Kang, S. (2019, May). Fence-region-aware mixed-height standard cell legalization. In Proceedings of the 2019 on Great Lakes Symposium on VLSI (pp. 259-262). (.pdf)
License

BSD 3-Clause License. See LICENSE file.",,What is Detailed Placement in OpenROAD?
"The restructure module in OpenROAD (rmp) is based on an interface to ABC for local resynthesis. The package allows logic restructuring that targets area or timing. It extracts a cloud of logic using the OpenSTA timing engine, and passes it to ABC through blif interface. Multiple recipes for area or timing are run to obtain multiple structures from ABC; the most desirable among these is used to improve the netlist. The ABC output is read back by a blif reader which is integrated to OpenDB. blif writer and reader also support constants from and to OpenDB. Reading back of constants requires insertion of tie cells which should be provided by the user as per the interface described below.",,What is Restructure module in OpenROAD?
"RePlAce: Advancing Solution Quality and Routability Validation in Global Placement. Its features are: Analytic and nonlinear placement algorithm. Solves electrostatic force equations using Nesterov's method (link) , Verified with various commercial technologies and research enablements using OpenDB (7/14/16/28/45/55/65nm), Verified deterministic solution generation with various compilers and OS, Supports Mixed-size placement mode.",,What is RePlAce in OpenROAD?
"A hierarchical automatic macro placer for large-scale complex IP blocks, ""Hier-RTLMP"". This tool builds on the existing RTLMP (mpl) framework, adopting a multilevel physical planning approach that exploits the hierarchy and data flow inherent in the design RTL.",,What is Hierarchical Macro Placement/ Hier-RTLMP ?
"OpenSTA is a gate level static timing verifier. As a stand-alone executable it can be used to verify the timing of a design using standard file formats. OpenSTA uses a TCL command interpreter to read the design, specify timing constraints and print timing reports.

",,What is Parallax Static Timing Analyzer or OpenSTA ?
"The Following standard file formats are supported by Parallax Static Timing Analyzer or OpenSTA: Verilog netlist, Liberty library, SDC timing constraints,SDF delay annotation, SPEF parasitics",,What file formats are supported by Parallax Static Timing Analyzer or OpenSTA?
"The Clocks that are supported in Parallax Static Timing Analyzer or OpenSTA are: Generated, Latency, Source latency (insertion delay), Uncertainty, Propagated/Ideal, Gated clock checks, Multiple frequency clocks",,What clocks are supported in Parallax Static Timing Analyzer or OpenSTA?
"This tool is an implementation of Design For Testing. New nets and logic are added to allow IC designs to be tested for errors in manufacturing. Physical imperfections can cause hard failures and variability can cause timing errors.
A simple DFT insertion consist of the following parts:
A scan_in pin where the test patterns are shifted in.
A scan_out pin where the test patterns are read from.
Scan cells that replace flops with registers that allow for testing.
One or more scan chains (shift registers created from your scan cells).
A scan_enable pin to allow your design to enter and leave the test mode.
TCL Commands

set_dft_config

set_dft_config [-max_length <int>]
               [-clock_mixing <string>]

-max_length: The maxinum number of bits that can be in each scan chain.
-clock_mixing: How architect will mix the scan flops based on the clock driver.
no_mix: Creates scan chains with only one type of clock and edge. This may create unbalanced chains.
clock_mix: Craetes scan chains mixing clocks and edges. Falling edge flops are going to be stitched before rising edge.
report_dft_config

report_dft_config

Prints the current DFT configuration to be used by preview_dft and insert_dft.
preview_dft

preview_dft [-verbose]

Prints a preview of the scan chains that will be stitched by insert_dft. Use this command to iterate and try different DFT configurations. This command do not perform any modification to the design.
-verbose: Shows more information about each one of the scan chains that will be created.
insert_dft

insert_dft

Implements the scan chains into the design by performing the following actions:
Scan Replace.
Scan Architect.
Scan Stitch.
The end result will be a design with scan flops connected to form the scan chains.
Example

This example will create scan chains with a max length of 10 bits mixing all the scan flops in the scan chains.
set_dft_config -max_length 10 -clock_mixing clock_mix
report_dft_config
preview_dft -verbose
insert_dft

Limitations

There are no optimizations for the scan chains. This is a WIP.
There is no way to specify existing scan ports to be used by scan insertion.
There is currently no way to define a user defined scan path.
We can only work with one bit cells.",,What is DFT?
